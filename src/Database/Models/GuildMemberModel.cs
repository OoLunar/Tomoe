using System;
using System.Collections.Generic;
using System.Linq;
using DSharpPlus.Entities;

namespace OoLunar.Tomoe.Database.Models
{
    /// <summary>
    /// Represents a <see cref="DiscordMember"/> in the database, storing only the relevant information needed.
    /// </summary>
    public sealed class GuildMemberModel
    {
        /// <summary>
        /// The object id generated by the database.
        /// </summary>
        public Guid Id { get; private set; }

        /// <summary>
        /// The id of the member.
        /// </summary>
        public ulong UserId { get; private set; }

        /// <summary>
        /// The guild id that the member has joined.
        /// </summary>
        public ulong GuildId { get; private set; }

        /// <summary>
        /// The first known moment of when the user joined the guild. May be inaccurate of the members joined before the bot was added.
        /// </summary>
        public DateTime JoinedAt { get; private set; }

        /// <summary>
        /// The current state of the member.
        /// </summary>
        public MemberState Flags { get; internal set; }

        /// <summary>
        /// The current roles of the member, stored as their ids.
        /// </summary>
        public ulong[] RoleIds { get; internal set; }

        public GuildMemberModel() { }

        /// <summary>
        /// Creates a new <see cref="GuildMemberModel"/> from a <see cref="DiscordMember"/>.
        /// </summary>
        public GuildMemberModel(DiscordMember member)
        {
            UserId = member.Id;
            GuildId = member.Guild.Id;
            JoinedAt = member.JoinedAt.UtcDateTime;
            Flags = MemberState.None;
            RoleIds = member.Roles.Select(role => role.Id).ToArray();
        }

        public static bool operator ==(GuildMemberModel? left, GuildMemberModel? right) => Equals(left, right);
        public static bool operator !=(GuildMemberModel? left, GuildMemberModel? right) => !Equals(left, right);
        public override bool Equals(object? obj) => obj is GuildMemberModel model && Id.Equals(model.Id) && UserId == model.UserId && GuildId == model.GuildId && JoinedAt == model.JoinedAt && Flags == model.Flags && EqualityComparer<ulong[]>.Default.Equals(RoleIds, model.RoleIds);
        public override int GetHashCode() => HashCode.Combine(Id, UserId, GuildId, JoinedAt, Flags, RoleIds);
    }

    [Flags]
    public enum MemberState
    {
        /// <summary>
        /// The member is present and has no special flags.
        /// </summary>
        None,

        /// <summary>
        /// The member has previously joined the guild however is not currently present.
        /// </summary>
        Absent = 1 << 1,

        /// <summary>
        /// The member is currently muted.
        /// </summary>
        Muted = 1 << 2,

        /// <summary>
        /// The member is currently banned.
        /// </summary>
        Banned = 1 << 3,
    }
}
